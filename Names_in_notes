import urllib.request
import re
from collections import Counter
import os

# структура таблицы insert into Tages values ("id", "Name", "Text", *"id текста")

def newdirs1():
    z = 'input_texts' 
    if os.path.exists(z):
        True
    else:
        os.makedirs(z)
    return

def newdirs2():
    l = 'output_texts' 
    if os.path.exists(l):
        True
    else:
        os.makedirs(l)
    return

def finding_text(text): # - достаю текст и id
    reg = '"([0-9]+?)","[0-9]+?","(.+?)","1[0-9]{3}-[0-1][0-9]-[0-3][0-9]","0000-00-00","0","0","[0-9]","[0-9]+",".+?"'
    a1 = re.findall(reg, text)
    return a1

def work_with_text(): # - открываю записи/ нахожу текст
    f = open('notes.csv', 'r', encoding = 'utf-8')
    string = f.read()
    f.close
    list_text = finding_text(string) # -  массив всех текстов
    return list_text

# Фамилии могут изменяться по падежам по-разному, поэтому должны быть разные регулярные выражения

def special_persons(): # - все фамилии необычные 
    f = open('list_persons_special.txt', 'r', encoding = 'utf-8')
    array = f.read()
    f.close()
    massiv_surnames_special = re.findall('(.*?) ', array)
    return massiv_surnames_special

def normal_persons(): # - все фамилии нормальные
    f = open('list_persons_normal.txt', 'r', encoding = 'utf-8')
    array = f.read()
    f.close()
    massiv_surnames_normal = re.findall('(.*?) ', array)
    return massiv_surnames_normal

def massiv_persons(): # - массив всеx фамилий
    a1 = special_persons()
    a2 = normal_persons()
    for i in a2:
        a1.append(i)
    return a1

def special_ending(special, surname): # - вариативность окончаний
    if special.endswith('ь'):
        name1 = special[:-1] + '(?:ь|я|е|ю|ем|ях|ям|ями|ях|ей|и|\\b)' + '\\b' + '|'
        surname = surname + name1
    elif special.endswith('ей'):
        name1 = special[:-1] + '(?:ь|я|е|ю|ем|ях|ям|ями|ях|ей|и|\\b)' + '\\b'  + '|'
        surname = surname + name1
    else:
        surname = surname + special + '\\b' + '|'
    return surname
            
def surname(massiv_surnames_special, massiv_surnames_normal): # -   создание регулярк
    surname = ''
    for special in massiv_surnames_special:
        surname = special_ending(special, surname)
    for normal in massiv_surnames_normal:
        if normal == massiv_surnames_normal[-1]:
            name2 = normal + '(?:а|у|ом|е|ов|ы|ам|ами|ах|\\b)' + '\\b'
            surname = surname + name2
        else:
            name2 = normal + '(?:а|у|ом|е|ов|ы|ам|ами|ах|\\b)' + '\\b' + '|'
            surname = surname + name2 
    return surname

def actual_surname(pip): # - какая именно фамилия встретилась 2
    surnames = []
    a1 = massiv_persons()
    for line in pip:
        for name in a1:
            name1 = name + '(?:а|у|ом|е|ов|ы|ам|ами|ах|ь|я|е|ю|ем|ях|ям|ями|ях|ей|и|\\b)'
            regex = re.findall(name1, line)
            if regex != []:
                if name in surnames:
                    continue
                else:
                    surnames.append(name)
    return surnames

def searching(list_text, surname): # - поиск в текстах
    d = {} # - {id : surname}
    formystem = {} # - {id : [text, [surname]]}
    for line in list_text:
        text_id = line[0]
        text = line[1]
        pip = re.findall(surname, text)
        if pip!=[]:
##            d[text_id] = actual_surname(pip)
            names = actual_surname(pip)
            formystem[text_id] = []
            formystem[text_id].append(text)
            formystem[text_id].append(names)
    f = open('input_texts/rouge.txt', 'a', encoding = 'utf-8')
    for idd in formystem:
        for person in formystem[idd][1]:
              f.write('\t'+ idd + ' ' + person + ' ' + formystem[idd][0]) # - 123 - разделитель
    f.close()
    return formystem

def mystem():
    inp = "input_texts"
    lst = os.listdir(inp)
    for fl in lst:
        os.system(r"/Users/Stoneberry/Desktop/курсач/mystem " + inp + os.sep + fl + " output_texts" + os.sep + fl + " -cid")
    return

                
def final():
    s0 = newdirs1()
    s1 = newdirs2()
    a1 = work_with_text()
    a2 = special_persons()
    a3 = normal_persons()
    a5 = surname(a2, a3)
    a6 = searching(a1, a5)
    s7 = mystem()
    return

if __name__=='__main__':
    final()
